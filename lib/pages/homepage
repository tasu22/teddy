import 'dart:async';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import '../widgets/server_list_tile.dart';
import '../widgets/custom_outlined_button.dart';
import '../services/vpn_servers.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  late Future<List<VpnServer>> _serversFuture;
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  VpnServer? _selectedServer;
  bool _isConnecting = false;
  bool _isConnected = false;
  int _hoursLeft = 24;
  Timer? _countdownTimer;

  void _connectToVpn() async {
    setState(() {
      _isConnecting = true;
    });

    VpnServer? serverToConnect = _selectedServer;

    // If no server selected, auto-select the fastest
    if (serverToConnect == null) {
      final servers = await _serversFuture;
      serverToConnect = servers.reduce((a, b) => a.ping < b.ping ? a : b);
    }

    try {
      // TODO: Use a VPN plugin to connect using serverToConnect.openvpnConfig
      // Simulate connection delay
      await Future.delayed(Duration(seconds: 2));

      // Simulate success (replace with real connection result)
      setState(() {
        _isConnecting = false;
        _isConnected = true;
      });
      _startCountdown();
    } catch (e) {
      setState(() {
        _isConnecting = false;
        _isConnected = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to connect: $e')),
      );
    }
  }

  void _startCountdown() {
    _countdownTimer?.cancel();
    _countdownTimer = Timer.periodic(Duration(hours: 1), (timer) {
      if (_hoursLeft > 0) {
        setState(() {
          _hoursLeft--;
        });
      } else {
        timer.cancel();
        setState(() {
          _isConnected = false;
        });
      }
    });
  }

  @override
  void dispose() {
    _countdownTimer?.cancel();
    _searchController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
    _serversFuture = fetchVpnGateServers();
  }

  String getGreeting() {
    final hour = DateTime.now().hour;
    if (hour < 12) {
      return 'Good morning!';
    } else if (hour < 17) {
      return 'Good afternoon!';
    } else {
      return 'Good evening!';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.green[100],
      appBar: AppBar(
        backgroundColor: Colors.green[100],
        title: Image.asset(
          'assets/images/teddyicon.png',
          height: 100,
        ),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(height: 16),
            Text(
              getGreeting(),
              style: TextStyle(
                fontSize: 22,
                fontWeight: FontWeight.bold,
                color: Color(0xFF008080),
              ),
            ),
            SizedBox(height: 24),
            CustomOutlinedButton(
              onPressed: () {
                showModalBottomSheet(
                  context: context,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                  ),
                  builder: (context) => Padding(
                    padding: EdgeInsets.only(
                      left: 24,
                      right: 24,
                      top: 24,
                      bottom: MediaQuery.of(context).viewInsets.bottom + 24,
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.lock_clock, color: Color(0xFF008080), size: 40),
                        SizedBox(height: 16),
                        Text(
                          'You have $_hoursLeft hours left for your VPN to continue to connect.',
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 18,
                            color: Color(0xFF008080),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 24),
                        CustomOutlinedButton(
                          onPressed: () {
                            // Add your ad-less logic here
                            Navigator.pop(context);
                          },
                          child: Text(
                            'Go Ad-less',
                            style: TextStyle(
                              color: Color(0xFF008080),
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
              child: Text(
                '$_hoursLeft',
                style: TextStyle(
                  color: Color(0xFF008080),
                  fontSize: 16,
                ),
              ),
            ),
            SizedBox(height: 16),
            Lottie.asset(
              'assets/animations/loader.json',
              width: 200,
              height: 200,
              fit: BoxFit.contain,
            ),
            SizedBox(height: 16),
            CustomOutlinedButton(
              onPressed: _isConnecting ? () {} : _connectToVpn,
              child: _isConnecting
                  ? SizedBox(
                      width: 24,
                      height: 24,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text(_isConnected ? 'C O N N E C T E D' : 'C O N N E C T'),
            ),
            SizedBox(height: 16),
            CustomOutlinedButton(
              onPressed: () {
                showModalBottomSheet(
                  context: context,
                  isScrollControlled: true,
                  builder: (context) => Padding(
                    padding: EdgeInsets.only(
                      left: 16,
                      right: 16,
                      top: 16,
                      bottom: MediaQuery.of(context).viewInsets.bottom,
                    ),
                    child: SizedBox(
                      height: MediaQuery.of(context).size.height * 0.5,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          TextField(
                            controller: _searchController,
                            onChanged: (value) {
                              setState(() {
                                _searchQuery = value.trim().toLowerCase();
                              });
                            },
                            decoration: InputDecoration(
                              labelText: 'Search servers',
                              labelStyle: TextStyle(color: Color(0xFF008080)),
                              prefixIcon: Icon(Icons.search, color: Color(0xFF008080)),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide(color: Color(0xFF008080)),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide(color: Color(0xFF008080)),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(30),
                                borderSide: BorderSide(color: Color(0xFF008080)),
                              ),
                            ),
                          ),
                          SizedBox(height: 16),
                          Expanded(
                            child: FutureBuilder<List<VpnServer>>(
                              future: _serversFuture,
                              builder: (context, snapshot) {
                                if (snapshot.connectionState == ConnectionState.waiting) {
                                  return Center(child: CircularProgressIndicator());
                                } else if (snapshot.hasError) {
                                  return Text('Failed to load servers');
                                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                                  return Text('No servers found');
                                }
                                final servers = snapshot.data!;
                                final Map<String, VpnServer> fastestPerCountry = {};
                                for (final server in servers) {
                                  if (!fastestPerCountry.containsKey(server.country) ||
                                      server.ping < fastestPerCountry[server.country]!.ping) {
                                    fastestPerCountry[server.country] = server;
                                  }
                                }
                                var fastestServers = fastestPerCountry.values.toList();

                                // Filter by search query
                                if (_searchQuery.isNotEmpty) {
                                  fastestServers = fastestServers.where((server) =>
                                    server.country.toLowerCase().contains(_searchQuery)
                                  ).toList();
                                }

                                return Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    ListTile(
                                      leading: Icon(Icons.flash_on, color: Color(0xFF008080)),
                                      title: Text('Auto-select fastest server', style: TextStyle(color: Color(0xFF008080))),
                                      onTap: () {
                                        setState(() {
                                          _selectedServer = null;
                                        });
                                        Navigator.pop(context);
                                      },
                                    ),
                                    Divider(),
                                    Expanded(
                                      child: ListView.builder(
                                        itemCount: fastestServers.length,
                                        itemBuilder: (context, index) {
                                          final server = fastestServers[index];
                                          return ServerListTile(
                                            icon: Icons.flag,
                                            title: server.country.toUpperCase().split('').join(' '),
                                            onTap: () {
                                              setState(() {
                                                _selectedServer = server;
                                              });
                                              Navigator.pop(context);
                                            },
                                          );
                                        },
                                      ),
                                    ),
                                  ],
                                );
                              },
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
              child: _selectedServer == null
                  ? Icon(Icons.location_on, color: Color(0xFF008080))
                  : Text(
                      _selectedServer!.country.toUpperCase().split('').join(' '),
                      style: TextStyle(
                        color: Color(0xFF008080),
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}